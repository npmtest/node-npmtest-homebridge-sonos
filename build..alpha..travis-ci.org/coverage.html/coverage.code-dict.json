{"/home/travis/build/npmtest/node-npmtest-homebridge-sonos/test.js":"/* istanbul instrument in package npmtest_homebridge_sonos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-sonos/lib.npmtest_homebridge_sonos.js":"/* istanbul instrument in package npmtest_homebridge_sonos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_sonos = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_sonos = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-sonos/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-sonos && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_sonos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_sonos\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_sonos.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_sonos.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_sonos.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_sonos.__dirname + '/lib.npmtest_homebridge_sonos.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-sonos/node_modules/homebridge-sonos/index.js":"var sonos = require('sonos');\nvar Sonos = require('sonos').Sonos;\nvar _ = require('underscore');\nvar inherits = require('util').inherits;\nvar Service, Characteristic, VolumeCharacteristic;\nvar sonosDevices = new Map();\nvar sonosAccessories = [];\nvar Listener = require('../homebridge-sonos/node_modules/sonos/lib/events/listener');\n\nmodule.exports = function(homebridge) {\n  Service = homebridge.hap.Service;\n  Characteristic = homebridge.hap.Characteristic;\n\n  // we can only do this after we receive the homebridge API object\n  makeVolumeCharacteristic();\n\n  homebridge.registerAccessory(\"homebridge-sonos\", \"Sonos\", SonosAccessory);\n}\n\n\n//\n// Node-Sonos Functions to process device information\n//\nfunction getZoneGroupCoordinator (zone) {\n        var coordinator;\n        sonosDevices.forEach(function (device) {\n                if (device.CurrentZoneName == zone && device.coordinator == 'true') {\n                        coordinator = device;\n                }\n        });\n        if (coordinator == undefined) {\n                var zoneGroups = getZoneGroupNames(zone);\n                zoneGroups.forEach(function (group) {\n                        sonosDevices.forEach(function (device) {\n                                if (device.group == group && device.coordinator == 'true') {\n                                        coordinator = device;\n                                }\n                        });\n                });\n        }\n        return coordinator;\n}\n\nfunction getZoneGroupNames(zone) {\n        var groups = [];\n        sonosDevices.forEach(function (device) {\n                if (device.CurrentZoneName == zone) {\n                        groups.push(device.group);\n                }\n        });\n        return groups;\n}\n\nfunction listenGroupMgmtEvents(device) {\n        var devListener = new Listener(device);\n        devListener.listen(function (listenErr) {\n                if (!listenErr) {\n                        devListener.addService('/GroupManagement/Event', function (addServErr, sid) {\n                                if (!addServErr) {\n                                        devListener.on('serviceEvent', function (endpoint, sid, data) {\n                                                sonosDevices.forEach(function (devData) {\n                                                        var dev = new Sonos(devData.ip);\n                                                        dev.getZoneAttrs(function (err, zoneAttrs) {\n                                                                if (!err && zoneAttrs) {\n                                                                        device.getTopology(function (err, topology) {\n                                                                                if (!err && topology) {\n                                                                                        var bChangeDetected = false;\n                                                                                        topology.zones.forEach(function (group) {\n                                                                                                if (group.location == 'http://' + devData.ip + ':' + devData.port + '/xml/device_description.xml') {\n                                                                                                        if (zoneAttrs.CurrentZoneName != devData.CurrentZoneName) {\n                                                                                                                devData.CurrentZoneName = zoneAttrs.CurrentZoneName;\n                                                                                                        }\n                                                                                                        if (group.coordinator != devData.coordinator || group.group != devData.group) {\n                                                                                                                devData.coordinator = group.coordinator;\n                                                                                                                devData.group = group.group;\n                                                                                                                bChangeDetected = true;\n                                                                                                        }\n                                                                                                }\n                                                                                                else {\n                                                                                                        var grpDevIP = group.location.substring(7, group.location.lastIndexOf(\":\"));\n                                                                                                        var grpDevData = sonosDevices.get(grpDevIP);\n                                                                                                        if (grpDevData != undefined) {\n                                                                                                                if (group.name != grpDevData.CurrentZoneName) {\n                                                                                                                        grpDevData.CurrentZoneName = group.Name;\n                                                                                                                }\n                                                                                                                if (group.coordinator != grpDevData.coordinator || group.group != grpDevData.group) {\n                                                                                                                        grpDevData.coordinator = group.coordinator;\n                                                                                                                        grpDevData.group = group.group;\n                                                                                                                        bChangeDetected = true;\n                                                                                                                }\n                                                                                                        }\n                                                                                                }\n\n                                                                                        });\n                                                                                        if (bChangeDetected) {\n                                                                                                sonosAccessories.forEach(function (accessory) {\n                                                                                                        var coordinator = getZoneGroupCoordinator(accessory.room);\n                                                                                                        accessory.log.debug(\"Target Zone Group Coordinator identified as: %s\", JSON.stringify(coordinator));\n                                                                                                        if (coordinator == undefined) {\n                                                                                                                accessory.log.debug(\"Removing coordinator device from %s\", JSON.stringify(accessory.device));\n                                                                                                                accessory.device = coordinator;\n                                                                                                        }\n                                                                                                        else {\n                                                                                                                var bUpdate = false;\n                                                                                                                if (accessory.device != undefined) {\n                                                                                                                        if (accessory.device.host != coordinator.ip) bUpdate = true;\n                                                                                                                }\n                                                                                                                else {\n                                                                                                                        bUpdate = true;\n                                                                                                                }\n                                                                                                                if (bUpdate) {\n                                                                                                                        accessory.log(\"Changing coordinator device from %s to %s (from sonos zone %s) for accessory '%s' in accessory room '%s'.\", accessory.device.host, coordinator.ip, coordinator.CurrentZoneName, accessory.name, accessory.room);\n                                                                                                                        accessory.device = new Sonos(coordinator.ip);\n                                                                                                                }\n                                                                                                                else {\n                                                                                                                        accessory.log.debug(\"No coordinator device change required!\");\n                                                                                                                }\n                                                                                                        }\n                                                                                                });\n                                                                                        }\n                                                                                }\n                                                                        });\n                                                                }\n                                                        });\n                                                });\n                                        });\n                                }\n                        });\n                }\n        });\n}\n\n\n\n//\n// Sonos Accessory\n//\n\nfunction SonosAccessory(log, config) {\n  this.log = log;\n  this.config = config;\n  this.name = config[\"name\"];\n  this.room = config[\"room\"];\n  this.mute = config[\"mute\"];\n\n  if (!this.room) throw new Error(\"You must provide a config value for 'room'.\");\n\n  this.service = new Service.Switch(this.name);\n\n  this.service\n    .getCharacteristic(Characteristic.On)\n    .on('get', this.getOn.bind(this))\n    .on('set', this.setOn.bind(this));\n\n  this.service\n    .addCharacteristic(VolumeCharacteristic)\n    .on('get', this.getVolume.bind(this))\n    .on('set', this.setVolume.bind(this));\n\n  this.search();\n}\n\nSonosAccessory.prototype.search = function() {\n\n        sonosAccessories.push(this);\n\n        var search = sonos.search(function(device, model) {\n                this.log.debug(\"Found device at %s\", device.host);\n\n                var data = {ip: device.host, port: device.port, discoverycompleted: 'false'};\n                device.getZoneAttrs(function (err, attrs) {\n                        if (!err && attrs) {\n                                _.extend(data, {CurrentZoneName: attrs.CurrentZoneName});\n                        }\n                        device.getTopology(function (err, topology) {\n                                if (!err && topology) {\n                                        topology.zones.forEach(function (group) {\n                                                if (group.location == 'http://' + data.ip + ':' + data.port + '/xml/device_description.xml') {\n                                                        _.extend(data, group);\n                                                        data.discoverycompleted = 'true';\n                                                }\n                                                else {\n                                                        var grpDevIP = group.location.substring(7, group.location.lastIndexOf(\":\"));\n                                                        var grpDevData = {ip: grpDevIP, discoverycompleted: 'false', CurrentZoneName: group.name};\n                                                        _.extend(grpDevData, group);\n                                                        if (sonosDevices.get(grpDevIP) == undefined) {\n                                                                sonosDevices.set(grpDevIP, grpDevData);\n                                                        }\n                                                }\n                                        }.bind(this));\n                                 }\n                                 if (sonosDevices.get(data.ip) == undefined) {\n                                        sonosDevices.set(data.ip, data);\n                                }\n                                else {\n                                        if (sonosDevices.get(data.ip).discoverycompleted == 'false') {\n                                                sonosDevices.set(data.ip, data);\n                                        }\n                                }\n                                var coordinator = getZoneGroupCoordinator(this.room);\n                                if (coordinator != undefined) {\n                                        if (coordinator.ip == data.ip) {\n                                                this.log(\"Found a playable coordinator device at %s in zone '%s' for accessory '%s' in accessory room '%s'\", data.ip, data.CurrentZoneName, this.name, this.room);\n                                                this.device = device;\n                                                search.destroy(); // we don't need to continue searching.\n                                        }\n                                }\n\n                                listenGroupMgmtEvents(device);\n\n                        }.bind(this));\n                }.bind(this));\n        }.bind(this));\n}\n\nSonosAccessory.prototype.getServices = function() {\n  return [this.service];\n}\n\nSonosAccessory.prototype.getOn = function(callback) {\n  if (!this.device) {\n    this.log.warn(\"Ignoring request; Sonos device has not yet been discovered.\");\n    callback(new Error(\"Sonos has not been discovered yet.\"));\n    return;\n  }\n\n  if (!this.mute) {\n    this.device.getCurrentState(function(err, state) {\n      if (err) {\n        callback(err);\n      }\n      else {\n        this.log.warn(\"Current state for Sonos: \" + state);\n        var on = (state == \"playing\");\n        callback(null, on);\n      }\n    }.bind(this));\n  }\n  else {\n     this.device.getMuted(function(err, state) {\n\n      if (err) {\n        callback(err);\n      }\n      else {\n        this.log.warn(\"Current state for Sonos: \" + state);\n        var on = (state == false);\n        callback(null, on);\n      }\n    }.bind(this));\n\n  }\n}\n\nSonosAccessory.prototype.setOn = function(on, callback) {\n  if (!this.device) {\n    this.log.warn(\"Ignoring request; Sonos device has not yet been discovered.\");\n    callback(new Error(\"Sonos has not been discovered yet.\"));\n    return;\n  }\n\n  this.log(\"Setting power to \" + on);\n  \n  if (!this.mute){\n    if (on) {\n      this.device.play(function(err, success) {\n        this.log(\"Playback attempt with success: \" + success);\n        if (err) {\n          callback(err);\n        }\n        else {\n          callback(null);\n        }\n      }.bind(this));\n    }\n    else {\n        this.device.stop(function(err, success) {\n            this.log(\"Stop attempt with success: \" + success);\n            if (err) {\n              callback(err);\n            }\n            else {\n              callback(null);\n            }\n        }.bind(this));\n    }\n  }\n  else {\n    if (on) {\n      this.device.setMuted(false, function(err, success) {\n        this.log(\"Unmute attempt with success: \" + success);\n        if (err) {\n          callback(err);\n        }\n        else {\n          callback(null);\n        }\n      }.bind(this));\n    }\n    else {\n        this.device.setMuted(true, function(err, success) {\n            this.log(\"Mute attempt with success: \" + success);\n            if (err) {\n              callback(err);\n            }\n            else {\n              callback(null);\n            }\n        }.bind(this));\n    }\n  }\n}\n\nSonosAccessory.prototype.getVolume = function(callback) {\n  if (!this.device) {\n    this.log.warn(\"Ignoring request; Sonos device has not yet been discovered.\");\n    callback(new Error(\"Sonos has not been discovered yet.\"));\n    return;\n  }\n\n  this.device.getVolume(function(err, volume) {\n    \n    if (err) {\n      callback(err);\n    }\n    else {\n      this.log(\"Current volume: %s\", volume);\n      callback(null, Number(volume));\n    }\n    \n  }.bind(this));\n}\n\nSonosAccessory.prototype.setVolume = function(volume, callback) {\n  if (!this.device) {\n    this.log.warn(\"Ignoring request; Sonos device has not yet been discovered.\");\n    callback(new Error(\"Sonos has not been discovered yet.\"));\n    return;\n  }\n\n  this.log(\"Setting volume to %s\", volume);\n  \n  this.device.setVolume(volume + \"\", function(err, data) {\n    this.log(\"Set volume response with data: \" + data);\n    if (err) {\n      callback(err);\n    }\n    else {\n      callback(null);\n    }\n  }.bind(this));\n}\n\n\n//\n// Custom Characteristic for Volume\n//\n\nfunction makeVolumeCharacteristic() {\n\n  VolumeCharacteristic = function() {\n    Characteristic.call(this, 'Volume', '91288267-5678-49B2-8D22-F57BE995AA93');\n    this.setProps({\n      format: Characteristic.Formats.INT,\n      unit: Characteristic.Units.PERCENTAGE,\n      maxValue: 100,\n      minValue: 0,\n      minStep: 1,\n      perms: [Characteristic.Perms.READ, Characteristic.Perms.WRITE, Characteristic.Perms.NOTIFY]\n    });\n    this.value = this.getDefaultValue();\n  };\n  \n  inherits(VolumeCharacteristic, Characteristic);\n}\n"}